generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  extensions = [vector]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id String @id @default(cuid())
  email String 
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String 
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole{
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  firstName    String?
  lastName     String?
  profilePic         String?
  password      String?
  role UserRole @default(USER)
  accounts      Account[]
  sessions      Session[]
  userCourses UserCourse[]
  notifications Notification[]

  @@map("users")
}

model Module {
  id String @id @default(cuid())
  name String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  videoUrl String?
  thumbnailUrl String?
  moduleType ModuleType @default(VIDEO)
  quiz Quiz?

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
}

enum ModuleType {
  VIDEO
  TEXT
  CHART
  MD
  QUIZ
}

model Quiz {
  id String @id @default(cuid())
  title String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId String @unique

  questions Question[]
}

model Question {
  id String @id @default(cuid())
  question String
  options Option[]
  correctOptionId String
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId String
}

model Option {
  id String @id @default(cuid())
  option String
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
}

model Course {
  id String @id @default(cuid())
  name String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  outcome String?
  currentLevel String?

  modules Module[]
  userCourses UserCourse[]
  attachments CourseAttachment[]
}

model UserCourse {
  id String @id @default(cuid())
  userId String
  courseId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseAttachment {
  id String @id @default(cuid())
  name String
  url String
  key String
  contentType String?
  
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  summaryEmbedding Unsupported("vector(768)")?
  summary String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 

enum NotificationType {
  CONSTRUCTIVE
  DESTRUCTIVE
  URGENT
  INFORMATIVE
}

model Notification {
  id         String           @id @default(cuid())
  type       NotificationType
  title      String
  content    String
  read       Boolean          @default(false)
  actionUrl  String?
  
  // Relation fields
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@index([userId])
  @@index([read])
}